<?xml version="1.0" encoding="UTF-8"?>
<edu>

<!-- ///////////////////////// UNIT 1 ///////////////////////// -->
	<unit title="Unit 1: HTML6 &amp; CSS3">
		<overview>
			<para>
				For Unit 1, you will be introduced to the main concepts of the web and the basic structure to writing in HTML5 &amp; CSS3. The following information has been sourced from Athabasca University COMP 466 and Internet and World Wide Web How To Program, 5th Edition (Deitel, Harvey, Abbey Deitel).
			</para>
			<para>
				Following the completion of this tutorial, a quiz to test your knowledge will be available.
			</para>
		</overview>
		<!-- ////////////////////// Chapter 1 ////////////////////// -->
		<chapter title="The Web">
			<overview>
				<para>
					When you surf the internet what types of things do you think occurs in the background? How does it know what to display? How does it know when you click or input items? All of these 'things' are a result of a web system in which a web server and web client communicate with each other. Every single click and action can trigger a request to a web server that will return the desired result. There are so many components that go into a well designed web system and within this chapter you will be exposed to many of these fundamental concepts. 
				</para>
			</overview>
			<!-- ////////////////////// Section 1 ////////////////////// -->
			<section title="Introduction">
				<para>
					Before we dive into specific UI components and writing your first scripts, we will need to learn about some terms that will be mentioned throughout the unit.
				</para>
				<definition term="Web Client">
					A web client sends its requests to the server and is usally known as the 'web browser'. As a user of a website, you are essential the web client. Some of these requests can include mouse-clicks, text input, and button-clicks.
				</definition>
				<definition term="Web Server">
					A web server processes the client's request and responds by either modifying and/or retrieving various forms of data. This can include requests to a database, server files, network files, and many others.
				</definition>
				<definition term="HTTP">
					HTTP stands for HyperText Transfer Program, which is essentially what allows for the transfer of data between clients and servers. This all occurs over the internet/ intranet.
				</definition>
			</section>
			<!-- ////////////////////// Section 2 ////////////////////// -->
			<section title="HyperText Transfer Program (HTTP)">
				<para>
					As defined in the previous section, HTTP enables the transfer and access of data. When you open up your browser and navigate to any website, you are most likely accessing HTML5 files, which creates the foundation of a website, using URIs and URLs. What exactly does this all mean? First, lets take a look the definition of these terms.
				</para>
				<definition term="HTML5">
					HTML5 stands for HyperText Markup Language (v5 being the current major version). This language describes the content and framework of a webpage. Such content includes the text, images, formatting, and even some business logic. Using HTML5, you will be able to create .html or .htm files that will be the basics to any website.
				</definition>
				<definition term="URI">
					URI stands for Uniform Resource Identifiers. In a general sense, it is a way to identify resources (i.e. web pages)on the internet.
				</definition>
				<definition term="URL">
					URL stands for Uniform Resource Lookup and is actually a subset of URIs that not only identifies a resource but it also provides a method to locate the resource.
				</definition>
				<para>
					Now that we have learned the terms, we need to understand the order of events that occur when accessing a web page.
				</para>
				<para>
					In order for a web page to be displayed, there must be some commication performed between the client and the server. First, the client would request the resource (i.e. the user would type in a URL into a web browser) using HTTP. This will send a request to the address of webpage. The server would then receive this request and lookup the resource that was requested. After retrieving the resource, the server will respond by displaying resource and its contents. The following images, taken from Deital p.607-608, explains this process quite nicely.
				</para>
				<image src="img/fig17-1_p607-608.png">
					Figure 1. Web Server and Client Communication
				</image>
				<para>
					As mentioned, the client can send many requests to the server. There are various request types such as GET and POST, to name a few.
				</para>
				<definition term="GET">
					GET will asks the server to retrieve the data such as images or files. You can think of it as almost a 'read-only' request that will not change any data stored on the server.
				</definition>
				<definition term="POST">
					When sending a POST request, the client's intent is to  be able to modify the data contained in the server. This can include adding, deleting, and editing the server's data. This usually involves data being sent from the client and processed by the server to obtain the desired result.
				</definition>
				<para>
					With these flows of communication, a web system can become quite complex. In order to keep a web system maintainable and easy for other developers to understand, a multi-tier design architecture is often used. The most common multi-tier design is comprised of three distinct layers.
				</para>
				<definition term="Database Layer (Bottom Tier)">
					Starting at the foundation of a web architecure is often a database level. This layer would typically hold all of the data a system contains to access, edit, and process. The client should never have direct access to this layer.
				</definition>
				<definition term="Business Logic Layer (Middle Tier)">
					The middle tier of this design can be thought of as the middle man that processes the data in the bottom tier and hands it over to the top layer to display to the client. In this layer, algorithms, accessing data, and handling requests are performed. It is also very common for this layer to be split into two layers. One being a Database Access Layer and all other business logic.
				</definition>
				<definition term="User Interface Layer (Top Tier)">
					At the top, is the UI layer that will present the data to the user. The most basic UI layer would simply be human readable but in order to make your web page stand out, a lot of UI elements and tricks are needed to creatively and effectively present the data.
				</definition>
				<para>
					Now that we have learned the foundations of what occurs in a web system, we can look deeper into how to develop HTML5 files and design a attractive UI using CSS3.
				</para>
			</section>
		</chapter>
		<!-- ////////////////////// Chapter 2 ////////////////////// -->
		<chapter title="HTML5">
			<overview>
				<para>
					Up until this point, we have learned about some of the background events that occur in a web system. But all of this doesn't really matter if there is nothing for a user to see and interact with. In order to display a website to a user, HTML5 is used! If you have previous experience with programming languages such as C, C++, C#, and Java, you might think HTML should be a similar enough. Wrong! HTML5 is a markup language that specifies both the structure as well as the content of a web page. The syntax is quite unique compared to common object-orientated or scripting languages.
				</para>
			</overview>	
			<!-- ////////////////////// Section 1 ////////////////////// -->
			<section title="Basics of HTML5">
				<para>
					The most basic outline of an HTML5 file will be as follows (Deital p.39).
				</para>		
				<image src="img/fig2-1_p39.png">HTML5 Outline</image>
				<para>
					This is the skeleton that makes up any and all HTML5 files you view in a web browser today. We will quickly break down what the above file is composed of.
				</para>
				<bulletList>
					<listItem>
						Line 1: This is the Document type, web browsers require this line in order for it to know what type of file it will be processing (compatibility etc.)
					</listItem>
					<listItem>
						Lines 2-3: These lines are comments and will be ignored by the browser
					</listItem>
					<listItem>
						Lines 6-9: This tag element is known as the Head. It contains the information of the HTML5 for the browser to properly know what to do with the file (encodings, title, style CSS, etc.)
					</listItem>
					<listItem>
						Lines 11-13: This is the Body, where all of a web page's content is written.
					</listItem>
				</bulletList>
				<para>
					To break down the terminology of the structures in an HTML5 file further, the following list will provide a basic syntax:
				</para>
				<definition term="Element">
					As seen above, the head and body elements are required in every HTML5. An element is usually in the form &lt;tagname&gt;content&lt;/tagname&gt; (paragraphs, list items, headers, etc.). They can also be written without an end tag when no content is required and will be in the form &lt;tagname/&gt;
				</definition>
				<definition term="Nested Elements">
					These are known as elements that fall within another element (ie. the title element at line 8)
				</definition>
				<definition term="Attributes">
					Within the starting tag of an element, you can specify properties of the element using attributes. These follow the form attributeName="attributeValue". Common attributes include the class (grouping), id (unique identifier), and src (for images and other media).
				</definition>
			</section>
			<!-- ////////////////////// Section 2 ////////////////////// -->
			<section title="Common Elements">
				<para>
					Like common objects and variable types in Java, C#, and python, HTML5 has many common elements that can be used in to build a web page. These are a few of the most common elements in HTML5
				</para>
				<definition term="Headings">
					Have you noticed the various "titles" on this webpage and their varying sizes? Well that is the result of using the heading element, &lt;h1&gt;Title&lt;/h1&gt;Headings h1 (biggest) - h6 (smallest) are available to use. These act as titles that can help organize and display your web page<br/>
				</definition>
				<example>
					<h3>Example h3 Title</h3>
				</example>
				<definition term="Paragraphs">
					Just as the name suggests this element can create a paragraph of text &lt;p&gt;My paragraph&lt;/p&gt;
				</definition>
				<example>
					<p>Example paragraph</p>
				</example>
				<definition term="Links">
					You can make most elements act as clickable links using &lt;a href="http://google.ca"&gt;Google!&lt;/a&gt;.
				</definition>
				<example>
					<a href="http://google.ca">Google!</a>
				</example>
				<definition term="Images">
					Images, like the figures you have seen on this webpage, are shown using &lt;img src="pathToMyImg"&gt;. Note these do not need an end tag &lt;/img&gt; or a /&gt;
				</definition>
				<definition term="Lists">
					You can make bulleted/unordered lists &lt;ul&gt; or numbered/ordered lists &lt;ol&gt;. Within these you create nested list item elements &lt;li&gt;
				</definition>
				<example>
					<ol><li>list item 1</li><li>list item 2</li></ol>
				</example>
				<definition term="Table">
					Tables are a bit more complex than the above elements. The general outline is as follows. You can look into addings headers and footers as they are quite straighforward.<br/>
						&lt;table&gt;<br/>
						&lt;tr&gt;Insert a row&lt;/tr&gt;<br/>
							&lt;th&gt;Column1&lt;/th&gt;<br/>
							&lt;th&gt;Column2&lt;/th&gt;<br/>
						&lt;/tr&gt;<br/>
						&lt;/table&gt;
				</definition>
				<example>
						<table border="1px solid black">
							<tr><th>Banana</th><th>Yellow</th></tr>
							<tr><th>Apple</th><th>Red</th></tr>
						</table>
				</example>
				<definition term="Form">
					This element helps to collect information from the user. This can also bundle together radio buttons and other elements together which requires user input. &lt;form&gt;Contains a lot of elements&lt;/form&gt;
				</definition>
				<definition term="Input">
					As mentioned above these represent radio buttons, check boxes, text boxes, datetime, etc. &lt;input type="radio" name="grouping"&gt; Text
				</definition>
				<example>
					<input type="radio" name="test"> Select Me!<br/></input>
				</example>
				<para>
					The best way in my opinion to learning what you can do is to google and research! There are so many elements and neat tricks you can do with them in order to make your webpage truely interactive and better. Just remember in order for you to follow good coding rules you can should always validate your HTML5 file. This can be done <a href="https://validator.w3.org/">here</a>
				</para>
			</section>
		</chapter>
		<!-- ////////////////////// Chapter 3 ////////////////////// -->
		<chapter title="CSS3">
			<overview>
				<para>
					Now that we know how to create the contents of a webpage, how do we make it look nicer than plain black and white text with no formatting? This is done using CSS, Cascading Style Sheets.
				</para>
				<para>
					Although you can add formatting to an HTML5 directly with attributes, this can result in messy code. It also makes it difficult to make any uniform change to the same element for example (unnecessary duplicaate formatting). For example, you want all headers to be blue but done want to add that color attribute to every single element in all of your files. CSS takes care of all formatting in a seperate file where you can easily control all of the same elements' styling.
				</para>
				<para>
					In order to link a style sheet to your HTML5 file, you need to add the following line within the head element. &lt;link rel="stylesheet" type="text/css" href="filePath.css"&gt;. Now you may begin creating your .css file that will help format your web page
				</para>
			</overview>
			<!-- ////////////////////// Section 1 ////////////////////// -->
			<section title="General GuideLines">
				<para>
					Similar to how there is so many attributes that you can do, it would be impossible for us to cover everything. However there is a general format that can be followed for the CSS styling. First we typically start with the tagname, class name, or id name in which we wish to stylize.
				</para>
				<bulletList>
					<listItem>
						Tags can simply be written as they are (ie. h2 {})
					</listItem>
					<listItem>
						Classes need to being with a '.' (ie. .myClass {})
					</listItem>
					<listItem>
						IDs need to begin with '#' (ie. #uniqueTitle {})
					</listItem>
				</bulletList>
				<para>
					You can also add multiple elements by comma seperating them (ie. h1, h2, #firstTitle {}) as well as follow a nested element such as a paragraph within the class "section"
				</para>
				<example>
					.section p<br/>{<br/>}
				</example>
				<para>
					Within the curly brackets is where you will add the attributes and their values. These follow the form attributeName: attributeValue;
				</para>
			</section>
			<!-- ////////////////////// Section 2 ////////////////////// -->
			<section title="Common Attributes">
				<para>
					The following are a few common attributes that you can do with CSS
				</para>
				<definition term="Color">
					You can set the value of the color attribute as a common color or an rgb hex value. The common colors can be written in plain english (ie. grey, red, green) and a list can be found <a href="https://www.w3schools.com/colors/colors_names.asp">here</a>. If you wish to use your own colours you may use the hex value with # appended in the beginning (ie. color: #00BFFF;)
				</definition>
				<definition term="Width/Height">
					The size of an element can be modified. You can use various ways such as specifying the exact pixel (ie. 50px), relative to the font size (ie. 3em), percentage (ie. 50%), <a href="https://www.w3schools.com/cssref/css_units.asp">etc.</a>
				</definition>
				<definition term="Margins/Padding">
					You can change the margins of the element or the padding in a similar way as the width and height
				</definition>
				<definition term="Alignment">
					You can center, left, right, top, or bottom align. It is easiest in my opinion to text-align the containing element if you wish to, for example, center align the nested element.
				</definition>
				<definition term="Border">
					You can change a border's size and colour or even get rid of one (setting it to 0)
				</definition>
				<definition term="Display">
					There are a few display attribute values you can use such as inline, inline-block, block, list-item, <a href="https://www.w3schools.com/cssref/pr_class_display.asp">etc.</a>
				</definition>
				<para>
					The list goes on and on. Again, the best way in my opinion is to research what you want to do and how it can be doen with CSS!
				</para>
				<conclusion>
				This concludes the tutorial on HTML5 and CSS. Please try out the quiz to test out your knowledge on this unit.
			</conclusion>
			</section>
		</chapter>
		<!-- //////////////////// QUIZ //////////////////// -->
		<quiz title="Unit 1 Quiz">
			<question txt="What does HTML5 stand for?">
				<ans correct="0">HTTP Text Markup Language</ans>
				<ans correct="1">Hypertext Markup Language</ans>
				<ans correct="0">HTTP Text Markup Lookup</ans>
				<ans correct="0">Hypertext Markup Lookup</ans>
			</question>
			<question txt="What is true about the Web Server">
				<ans correct="0">It sends requests to retrieve information files</ans>
				<ans correct="0">It is a physical room of people who receive data and finds it</ans>
				<ans correct="0">It is not a part of web systems</ans>
				<ans correct="1">It receives requests for information and data</ans>
			</question>
			<question txt="What are the three tiers in order from bottom tier to top tier in a Web System?">
				<ans correct="0">Database, GUI Layer, Business layer</ans>
				<ans correct="0">GUI layer, Businesss Layer, Database</ans>
				<ans correct="0">Business Layer, Database, GUI Layer</ans>
				<ans correct="1">None of the above</ans>
			</question>
			<question txt="CSS stands for?">
				<ans correct="0">Cascading Sheet System</ans>
				<ans correct="0">Common Sheet Style</ans>
				<ans correct="1">Cascading Style Sheet</ans>
				<ans correct="0">Creative Styling Size</ans>
			</question>
			<question txt="What does the head element used for?">
				<ans correct="0">The content of the web page (ie. images, text, headings)</ans>
				<ans correct="1">The title, encoding, and css linking</ans>
				<ans correct="0">All headings of the document go here</ans>
				<ans correct="0">Specifies what elements have been used in the document</ans>
			</question>
			<question txt="Are URIs the same as URLs? Why?">
				<ans correct="0">No, they are synonyms to each other</ans>
				<ans correct="0">Yes, URIs are a subset of URLs</ans>
				<ans correct="1">Yes, URLs are a subset of URIs</ans>
				<ans correct="0">Yes, URIs are integer based and URLs are long int based</ans>
			</question>
			<question txt="How can you stylize your HTML5 files?">
				<ans correct="0">From within the HTML5 file</ans>
				<ans correct="0">In a CSS file</ans>
				<ans correct="0">None of the above</ans>
				<ans correct="1">All of the above</ans>
			</question>
		</quiz>
	</unit>
	<unit title="Unit 2: JavaScript &amp; HTML5 Canvas">
		<overview>
			<para>
				For Unit 2, you will be introduced to the main concepts and basic structure to JavaScript (not to be confused with Java). The following information has been sourced from Athabasca University COMP 466 and Internet and World Wide Web How To Program, 5th Edition (Deitel, Harvey, Abbey Deitel).
			</para>
			<para>
				Following the completion of this tutorial, a quiz to test your knowledge will be available.
			</para>
		</overview>
		<chapter title="JavaScript">
			<overview>
				<para>
					Now that you know the basics of HTML5 and CSS3, you might be wondering how to do things like calculations, event handling, or creating a dynamic web page. This is where Javascript can improve your web pages greatly. This is not the same as Java which is object orientated. Javascript is a scripting language to enhance both the appearance and functionality of web pages.
				</para>
			</overview>
			<section title="Javascript Basics">
				<para>
					Similar to CSS, you can have inline Javascript code within your HTML5 files or you can choose to have a seperate .js file and simply link it in your HTML5. In order to use Javascript inline you need to create a script element as follows (Deital p.187)
				</para>
				<image src="img/fig6-1_p187.png">
					Figure 1. Example of Javascript Element
				</image>
				<para>
					In this example, a line was simply written to the document/ web page. If you would rather use javascript in a seperate file than you simply need to add '&lt;script src="nameOfFile.js" type="text/javascript"&gt;&lt;/script&gt;' to your HTML5 file. his doesn't necessarily need to go into the head of your file. Since your web browser will chronologically process the HTML5 and script in the order it is presented, if you have 'global' function or reference elements that have not yet been processed than the browser will throw an error. It doesn't know that the element you are referencing is below the script element. It may be safe to put your script element below your HTML5 content or try to design a system where this wouldnt be an issue.
				</para>
				<para>
					There are a few basics that we will be covering in this tutorial which will include how to common knowledge with Javascript, call functions, and trigger events.
				</para>
			</section>
			<section title="Common Javascript Elements and Concepts">
				<para>
					There are a few main objects and methods that would be excellent to understand as an introduction to Javascript. Before listing some of them, it should be noted that Javascript behaves similarly to python in that it does not explicitly define an element's/object's type. You do not need to specifiy the parameter type (ie. function(nameOfParam){} rather than function(int name){}) or need to specifying one for a variable. You can simply give the type 'var' for every variable you create (similar to the capabilities of C#). With that in mind, here is a list of some common Javascript knowledge:
				</para>
				<definition term="Document">
					The 'document' object represents the HTML5 document object. This gives you access to all of the elements found in the file. These are known as the Document Object Model (DOM) which we will later discuss how to get elements and attributes for these objects.
				</definition>
				<definition term="Methods of DOM">
					Similar to the concept of a class object, DOM objects have attributes and methods which can be called. For example if we want to write a line to the document, the method 'writeln()' can be called.
				</definition>
				<code>document.writeln("Hello World!")</code>
				<definition term="Attributes of DOM">
					Objects have attributes that can be set or simply just to get the value of an attribute. You can call the method '.setattribute(...)' or to modify/get CSS attributes you can directly set them. For example if you want to hide an element you can do the following
				</definition>
				<code>myClass.style.display = 'none';</code>
				<definition term="Semi-colon">
					The semi colon is not required but it is greatly advised to reduce any bugs that may occur
				</definition>
				<definition term="Case Sensitive">
					Javascript is case sensitive so be sure to have the correct casing!
				</definition>
				<definition term="Quotes">
					You can mix and match single quotes ' with double quotes " and they should work the same in any case. What is useful is when you want to display either single/ double quotes to the user. You should then nest the quotes you wish to show in the opposing quotes.
				</definition>
				<definition term="Window">
					The window object can be thought of as the browser window. You can invoke an alert dialog (a), create a function that will be called when the window loads (b), and even get a user's input from a window prompt (c). We will discuss this syntax later in the tutorial.
				</definition>
				<code>(a) window.alert("Warning!")</code>
				<code>(b) window.onload() = function() {};</code>
				<code>(c) window.prompt("Please enter a number");</code>
				<definition term="Concatinating Vs. Adding">
					The '+' symbol can be used to concatinate strings as well as add numbers. You must be careful with this and not confuse concatinating string with adding numbers. Look at the following as an example, where y = 5.
					<code>y + 2 =" + y + 2</code>
					<code>Expected: "y + 2 = 7"</code>
					<code>Result: "y + 2 = 52"</code>
					This is the wrong result since we mixed string with integer values. We need to specify exactly that we want to add two integers by grouping them within brackets. This will add (y + 2) as ints then concat them with the "y + 2 =" string.
					<code>y + 2 =" + (y + 2)</code>
					<code>Result: "y + 2 = 7"</code>
				</definition>
				<definition term="Strict Equals/Not Equals">
					Typically it is good enough to compare two objects/values with a == a or a != b. But in Javascript the following condition would also return true, "72" == 72, even though one is a string and another is an integer. To strictly compare you must use '===' or '!=='
				</definition>
				<code>"72" === 72 will result in false</code>
				<definition term="If Condition">
					You can use if, else if, and else as you would with any other programming language.
				</definition>
				<code>if(condition){}else if(condition){} else{};</code>
				<definition term="While Loops">
					You can loop until a condition is met with
				</definition>
				<code>while(condition){};</code>
				<definition term="For Loops">
					A for loop allows you to iterate through an indexed array or list.
				</definition>
				<code>for(...){}</code>
				<definition term="Increment, Decrement">
					For integers, you can easilly increment or decrement them with the following
				</definition>
				<image src="img/fig7-13_p239.png">
					Figure 2. Javascript Increment &amp; Decrement
				</image>
			</section>
			<section title="Function">
				<para>You can create functions in Javascript that will help you group together common code with parameters. For example the basic structure is:
				</para>
				<code>function AddTwo(input) { return input + 2; }</code>
				<para>
					You can also use common function such as many Math functions. To list a few:
				</para>
				<code>Math.pow(2,3) is 2 to the power of 3</code>
				<code>Math.random() returns a random number</code>
				<code>Math.floor(2.33), Math.ceil(2.99), Math.round(2.5) will round your values</code>
				<para>
					You can retrieve HTML5 elements by their id, class, etc.
				</para>
				<code>
					document.getElementById("idVal") or using jquery $("#idVal") to retrieve an element by their ID
				</code>
				<code>
					document.getElementsByClassName("classVal") or using jquery $(".classVal") to get elements by their class
				</code>
				<para>
					You can also have recursive functions (function that call itself) or iterative functions.
				</para>
			</section>
			<section title="Event Handling">
				<para>
					Buttons, forms, inputs, and various other HTML5 elements can trigger events! Javascript allows you to control what happens when they are triggered. You can either use a inline functions, global elements, or use JQuery to invoke these methods.
				</para>
				<definition term="Inline">
					In your HTML5 element you can set the event method to call a javascript method you have written.
				</definition>
				<image src="img/inline_event.png">
					Figure 3. Inline Javascript
				</image>
				<definition term="Global">
					You can retrieve the element and then use their event handling method in a global way
				</definition>
				<image src="img/global_event.png">
					Figure 4. Global Element
				</image>
				<definition term="JQuery">
					If you use JQuery, you can use a shorter form than having to globally retrieve the element first
				</definition>
				<image src="img/jquery_event.png">
					Figure 5. Using JQuery
				</image>
			</section>
		</chapter>
		<chapter title="HTML5 Canvas">
			<overview>
				<para>
					The canvas element is used to create 2D graphics, animation, images, videos. This is where you can let your creativity shine with more artistic elements. The canvas works with a grid system of (x horizontal, y vertical). top left corner has the grid value of (0,0). Moving right will increase the x value (ie. (50,0) is 50 pixels to the right of the top left corner). Moving down will increase the y coordinate (ie. (50,10) is 50 px right and 10 px down from the left corner).
				</para>
			</overview>
			<section>
				<para>
					Below is an example of the canvas element (Deital p.446)
				</para>
				<image src="img/fig14-2_p446.png">
					Figure 6. Code for a Canvas Element
				</image>
				<para>
					There is so much you can do with the canvas element so it would be best to explore <a href="https://www.w3schools.com/html/html5_canvas.asp">here</a>!
				</para>
			<conclusion>
				This concludes the tutorial on Javascript and HTML5 Canvas. Please try out the quiz to test out your knowledge on this unit.
			</conclusion>
			</section>
		</chapter>
		<quiz title="Unit 2 Quiz">
			<question txt="Is Javascript the same as Java?">
				<ans correct="0">No, one is a compueter language and another is a coffee type</ans>
				<ans correct="1">No, one is a web scripting language and the other is object orientated</ans>
				<ans correct="0">Yes, Javascript is special type of Java</ans>
				<ans correct="0">Yes, Java is a special type of Javascript</ans>
			</question>
			<question txt="What does DOM stand for?">
				<ans correct="1">Document Object Model</ans>
				<ans correct="0">Data Objective Model</ans>
				<ans correct="0">Document Ordered Model</ans>
				<ans correct="0">Data Object Manager</ans>
			</question>
			<question txt="What are the purpose of semi colons?">
				<ans correct="0">They are ignored so you can put them anywhere</ans>
				<ans correct="1">They are not required but terminate a line</ans>
				<ans correct="0">They are absolutely required to terminate a line</ans>
				<ans correct="0">They are special characters and should not be used</ans>
			</question>
			<question txt='What is the result of "y + 5 = " + y + 5, when y = 1?'>
				<ans correct="0">"y + 5 = 6"</ans>
				<ans correct="0">"y + 5 = y + 5"</ans>
				<ans correct="0">"y + 5 = y5"</ans>
				<ans correct="1">"y + 5 = 15"</ans>
			</question>
			<question txt='How do you get the result "x + 10 = 30", when x = 20?'>
				<ans correct="0">("x + 10 = ") + x + 10</ans>
				<ans correct="0">"x + 10 = " + (x) + 10</ans>
				<ans correct="1">"x + 10 = " + (x + 10)</ans>
				<ans correct="0">("x + 10") + (x) + (10)</ans>
			</question>
			<question txt="How can you trigger an event?">
				<ans correct="1">With JQuery, $("#test").onclick = function() {}</ans>
				<ans correct="0">With global javascript (ie. OnClick.Button() {});</ans>
				<ans correct="0">With inline HTML5. Where special elements have the tag as the event trigger (ie. &lt;onclick&gt;)</ans>
				<ans correct="0">All of the above</ans>
			</question>
			<question txt="Where is (0, 0) on the HTML5 Canvas element">
				<ans correct="0">Top Right Corner</ans>
				<ans correct="0">Center of the element</ans>
				<ans correct="0">Bottom Left</ans>
				<ans correct="1">Top Left</ans>
			</question>
		</quiz>
	</unit>
	<unit title="Unit 3: XML &amp; Ajax">
		<overview>
			<para>
				This unit will teach you the basics of XML and Ajax. These can help organize your documents and data as well as provide ways to request the server for information.
			</para>
		</overview>
		<chapter title="XML">
			<overview>
				<para>
					XML stands for Extensible Markup Language. It has become a standard format for data exchange over the internet. This markup language can describe any type of data that humans can understand and computers to easily process. Below is an example of XML describing a baseball player (Deital p.512).
					<image src="img/fig15-1_p512.png">
						Simple XML Example
					</image>
					<para>
						The structure of XML is similar to HTML5 elements and can even have attributes. The 'tags' in this case are user defined and therefore there are endless possibilities in representing data.
					</para>
				</para>
			</overview>
			<section title="XML Basics">
				<para>
					There are a few basic definitions and structures in XML that are handy to know!
				</para>
				<definition term="Data/Text Content">
					As seen in the above example, John is considered to be the data of the document
				</definition>
				<definition term="Element">
					In the above example, firstName is an element. This will link the element to its contained data. Note that an XML file should always contain one root element (ie. player) and element names should not contain any whitespace. It is important to include a root element, match each start tag with an end tag, and to keep casing uniform since XML is case sensitive
				</definition>
				<definition term="Nested Elements">
					You can nest elements within each other to create a more detailed and complex XML structure. You should declare your XML version similar to how you declare the information for an HTML5 file. To do this you should follow what's written at line 1 of the example above.
				</definition>
				<definition term="Type">
					You can add a type attribute to your XML elements which can help differentiate between, for example, contact elements where one is of type sender and one is of type receiver.
				</definition>
				<definition term="Namespace">
					Often times there may be elements that you want to be represented with the same name. Even though XML allows this, it can be hard in terms of readability and maintainability. You can use namespaces to provide some organization.
				</definition>
				<para>
					You should always ensure your XML is well formed. There are many online resources such as <a href="https://www.w3schools.com/xml/xml_validator.asp">W3Schools</a> to validate your XML.
				</para>
				<para>
					Most XML files can be viewed in a browser without any styling but will usually have a warning at the top to state no style is associated with it. Although you can still view the XML it's not in a nice format that the browser can display. You can add a XSL sheet linked to your XML (similar to the idea of a CSS file to an HTML5 file). <a class="def">XSL</a> stands for Extensible Stylesheet Language and will be explained later.
				</para>
			</section>
			<section title="Document Type Definition (DTD)">
				<definition term="DTD">
					This stands for Docuement type definition. It describes the structure of your XML file so that an XML parser can verify if your XML document is valid. This will help when it comes to formatting your XML in a valid and uniform way. XML documents that do not follow the linked DTD document will display an error. Although you have a well structured document, you may not have a valid document. However, DTDs have been considered not flexible enough and do not specify data types. This is where XML schemas come in.
				</definition>
			</section>
			<section title="XML Schema">
				<definition term="XSD">
					stands for XML Schema Document. This also describes the elements and content of your XML document with the added information of data types. XSD are more widely used to validate XML Documents.
				</definition>
			</section>
			<section title="Styling XML with XSL">
				<para>
					As mentioned above, XSL files specifies how a browser should render the XML file. This will help us control what elements are headings, paragraphs, or lists! The line below should be added into your XML file to link your .xsl file.
				</para>
				<code>&lt;?xml-stylesheet href="resume.xsl" type="text/xsl"?&gt;</code>
				<para>
					The following definitions introduce some basic knowledge with XSL:
				</para>
				<definition term="Template">
					Templates are used in XSL files to match and specify what nodes to process. The syntax is as follows
				</definition>
				<code>&lt;xsl:template match = "element"&gt;</code>
				<definition term="Root Element">
					match ="/"
				</definition>
				<definition term="Specific Element">
					match ="nameOfElement"
				</definition>
				<definition term="Any Element">
					match ="*"
				</definition>
				<definition term="Current Element">
					match =".", note this should work best within a nested match
				</definition>
				<para>
					The content of an XSL file is very similar to an HTML5 but its content are the XML values. The following is an example of how you can set up a XSL to style your XML documents (Deital p.540).
				</para>
				<image src="img/fig15-19_p540.png">
					XSL Styling
				</image>
			</section>
		</chapter>
		<chapter title="AJAX">
			<overview>
				<para>
					Ajax stands for Asynchronous Javascript and XML. This makes client side scripting more responsive to your web system. It send aynchronous request to the server and will not be blocked, therefore making your webpages more responsive.
				</para>
				<para>
					Traditionally, a web system has a client side and server side. Ajax is considered to be a middle tier between the the client and server. Ajax can create a XMLHttpRequest to manage a request and retrieve the data from the server. While this request has been sent, the user is able to move on. A good aspect of using Ajax is that it does not require you to reload a page every time a request is sent. It uses a function known as the <a class="def">callback function</a> that uses <a class="def">partial page update</a> which will update the specific element rather than the whole page.
				</para>
				<para>
					The following image (Deital p.574) gives some insight of how Ajax works.
				</para>
				<image src="img/fig16-2_p574.png">
					Intro to AJAX
				</image>
			</overview>
			<section title="Common AJAX Definitions">
				<para>
					Ajax is commonly used through XMLHttpRequests, which was mentioned earlier to be request manager objects. It can detect state changes such as onreadystatechange to ensure that the data requests has been fully sent from the server. The following are some other common XMLHttpRequest methods
				</para>
				<definition term="send()">
					This can sent get, post, etc. to the server and specify the data to retreive
				</definition>
				<definition term="responseXML">
					Retrieves the xml file from the server
				</definition>
				<definition term="abort()">
					Stops the current request
				</definition>
				<definition term="status">
					A status = 200 means a sucessful request was done. 500 means an error has occured
				</definition>
				<para>
					This is just a basic run down of Ajax and as always I reccommend to go online to find more detailed things you can do with Ajax. W3Schools does a good job <a href="https://www.w3schools.com/xml/ajax_intro.asp">here</a>!
				</para>
				<conclusion>
					This concludes the tutorial on XML and Ajax. Please try out the quiz to test out your knowledge on this unit.
				</conclusion>
			</section>
		</chapter>
		<quiz title="Unit 3 Quiz">
			<question txt="What does XML stand for?">
				<ans correct="0">External Markup Language</ans>
				<ans correct="0">External Management Lanuage</ans>
				<ans correct="1">Extensible Markup Language</ans>
				<ans correct="0">Extensible Management Language</ans>
			</question>
			<question txt="What typeås of elements can I use in an XML file?">
				<ans correct="0">The same as those in HTML5</ans>
				<ans correct="0">There is an online database of XML elements to use</ans>
				<ans correct="0">XML documents do not use elements</ans>
				<ans correct="1">Any elements can be used since they are user defined</ans>
			</question>
			<question txt="What is the most common way to validate XML documents?">
				<ans correct="1">XSD</ans>
				<ans correct="0">XSL</ans>
				<ans correct="0">DTD</ans>
				<ans correct="0">DTL</ans>
			</question>
			<question txt="How does one stylize an XML document?">
				<ans correct="0">Inline the XML sheet</ans>
				<ans correct="1">With a XSL document</ans>
				<ans correct="0">With a CSS document</ans>
				<ans correct="0">With a HTML5 document</ans>
			</question>
			<question txt="What does AJAX stand for?">
				<ans correct="0">Abstract Javascript and XML</ans>
				<ans correct="1">Asynchronous Javascript and XML</ans>
				<ans correct="0">Adaptable Javascript and XML</ans>
				<ans correct="0">Agile Javascript and XML</ans>
			</question>
			<question txt="What is a favourable aspect of using Ajax?">
				<ans correct="0">Ajax stylizes your web page with XML and Javascript</ans>
				<ans correct="0">Ajax reloads your webpage quicker than without it</ans>
				<ans correct="0">Ajax is not yet prefered or widely accepted</ans>
				<ans correct="1">Ajax does not relaod a web page after a request</ans>
			</question>
			<question txt="What status code represents a successful request?">
				<ans correct="0">0</ans>
				<ans correct="0">100</ans>
				<ans correct="1">200</ans>
				<ans correct="0">500</ans>
			</question>
		</quiz>
	</unit>
</edu>